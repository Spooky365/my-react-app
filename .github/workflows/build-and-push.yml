# Name of your workflow
name: Build and Push Docker Image

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
    # Also trigger on version tags like v1.0.0, v1.2.3, etc.
    tags: [ "v*.*.*" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub using the secrets we created
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: This action is a genius. It automatically creates smart tags for your image.
      # - For a push to 'main', it will create tags like 'sha-xxxxxxx' and 'latest'.
      # - For a git tag 'v1.2.3', it will create a tag '1.2.3'.
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          # IMPORTANT: CHANGE THIS to your Docker Hub username and image name
          images: skoopy365/my-react-app

      # Step 4: Build the image using your Dockerfile and push it to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory as the build context
          push: true # Actually push the image
          tags: ${{ steps.meta.outputs.tags }} # Use the smart tags from the 'meta' step
          labels: ${{ steps.meta.outputs.labels }} # Add helpful labels to the image
