# Name for your GitHub Actions workflow
name: Build and Push Docker Image

# This section defines when the workflow will be triggered
on:
  # Trigger the workflow on push events to the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab on GitHub
  workflow_dispatch:

# Defines the jobs that will be run. We only have one job here.
jobs:
  build-and-push:
    # Specifies that this job should run on the latest version of an Ubuntu runner
    runs-on: ubuntu-latest

    # A sequence of tasks that will be executed for this job
    steps:
      # Step 1: Check out your repository's code so the workflow can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub using the secrets you stored in GitHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Extract metadata to create smart, useful tags for your Docker image
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          #
          # !!! IMPORTANT: CUSTOMIZE THIS LINE !!!
          # Change 'your-dockerhub-username/my-react-app' to your actual Docker Hub username and image name.
          #
          images: skoopy365/my-react-app

          # This block defines the tagging strategy.
          # It is correctly indented under 'with:'.
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD-HHmmss'}}

      # Step 4: Build the Docker image from your Dockerfile and push it to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # 'context: .' tells the action to use the current directory as the build context
          context: .
          # 'push: true' enables pushing the image to the registry
          push: true
          # 'tags:' and 'labels:' are automatically populated by the output of the 'meta' step above
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
